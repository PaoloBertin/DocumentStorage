#parse("include/init_var_entity.vm")
package ${ROOT_PKG}.web.controller;

import java.util.Optional;
import java.util.Locale;
import java.io.IOException;
import java.io.InputStream;
import java.util.Map;
import java.util.HashMap;

import eu.opensource.web.controller.util.*;

import jakarta.validation.Valid;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.Part;

import lombok.extern.slf4j.Slf4j;
import lombok.RequiredArgsConstructor;

import org.springframework.http.MediaType;

import org.springframework.validation.BindingResult;
import org.springframework.stereotype.Controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.ui.Model;

import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.context.MessageSource;

import ${ROOT_PKG}.services.*;
import ${ROOT_PKG}.model.*;

@Slf4j
@RequiredArgsConstructor
@RequestMapping(value = "/${element}", produces = MediaType.APPLICATION_JSON_VALUE)
@Controller
public class ${entity.name}Controller {

	private final ${entity.name}Service ${element}Service;

    @Autowired
    private MessageSource messageSource;

    /**
     * Visualizza tutti i record 
     *
     * @param page
     * @param size
     * @param uiModel
     * @return nome vista
     */
    @GetMapping("/all")
    public String list${entity.name}(@RequestParam(name = "page", defaultValue = "0") int page,
                                   	@RequestParam(name = "size", defaultValue = "10") int size,
                                   	Model uiModel) {

        Pageable pageable = PageRequest.of(page, size);

        Page<${entity.name}> ${element} = ${element}Service.getAll${entity.name}(pageable);

        uiModel.addAttribute("page", page);
        uiModel.addAttribute("size", size);
        uiModel.addAttribute("${element}", ${element});

        log.debug("visualizza tutti i ${element}");

        return "${element}/list";
    }

    /**
     * Gestisce la richiesta di visualizzare un element
     *
     * @param id
     * @param uiModel
     * @return nome vista
     */
    @GetMapping(value = "/{id}")
    public String show${entity.name}(@PathVariable("id") Long id, Model uiModel) {

        Optional<${entity.name}> entity = ${element}Service.get${entity.name}ById(id);

        if (entity.isPresent()) {
            Map<String, String> document = new HashMap<>();
            Document object = entity.get();
#foreach(${attribute} in ${entity.attributes})            
            ${element}.put("${attribute.name}", String.valueOf(object.get${fn.capitalize(${attribute.name})}()));
#end

            uiModel.addAttribute("${element}", ${element});

            return "${element}/show${entity.name}";
        } else {
            return "${element}/error";
        }
    }

    /**
     * Recupera un elemento e rimanda al form per l'aggiornamento
     *
     * @return pagina edit
     */
    @GetMapping(value = "/{id}", params = "form")
    public String updateForm${entity.name}(@PathVariable("id") Long id,
                                           @RequestParam(required = true) String form,
                                           Model uiModel) {

        Optional<${entity.name}> ${element} = ${element}Service.get${entity.name}ById(id);

        if (${element}.isEmpty()) {
            return "${element}/error";
        } else {
            uiModel.addAttribute("${element}", ${element}.get());
            return "${element}/edit";
        }
    }

    @PutMapping()
    public String update${entity.name}(@ModelAttribute ${entity.name} ${element}, Model uiModel) {

        ${element} = ${element}Service.save${entity.name}(${element});
        
        uiModel.addAttribute("messaggio", "${entity.name} aggiornato con successo");

        return "confermaAggiornamento"; // Mostra la pagina di conferma
    }

    /**
     * Recupera il contenuto di un elemento
     *
     * @param id identificativo elemento\
     * @return conenuto elemento
     */
    @GetMapping(value = "/content/{id}")
    @ResponseBody
    public byte[] downloadContent(@PathVariable("id") Long id) {
           
        Optional<${entity.name}> ${element} = ${element}Service.get${entity.name}ById(id);

        return ${element}.get().getContent();
    }

    /**
     * Crea elemento empty e rimanda al form per definire gli attributi
     *
     * @return pagina edit
     */
    @GetMapping(params = "form")
    public String createForm${entity.name}(@RequestParam(required = true) String form, Model uiModel) {

        ${entity.name} ${element} = new ${entity.name}();

        uiModel.addAttribute("${element}", ${element});

        return "${element}/edit";
    }

    /**
     * Rende persistente un nuovo elemento
     *
     * @param ${entity.name}
     * @param bindingResult
     * @param uiModel
     * @param httpServletRequest
     * @param redirectAttributes
     * @param locale
     * @param file
     *
     * @return nome vista
     */
    @PostMapping()
    public String create${entity.name}(@Valid ${entity.name} ${element},
                                       @RequestParam(value = "file", required = false) Part file,
                                       BindingResult bindingResult,
                                       Model uiModel,
                                       HttpServletRequest httpServletRequest,
                                       RedirectAttributes redirectAttributes,
                                       Locale locale) {

        log.info("Creating ${entity.name}");

        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("message", new Message("error", messageSource.getMessage("${element}.save.fail", new Object[]{}, locale)));
            uiModel.addAttribute("${element}", ${element});
            return "${element}/edit";
        }

        //
        uiModel.asMap().clear();
        redirectAttributes.addFlashAttribute("message", new Message("success", messageSource.getMessage("${element}.save.success", new Object[]{}, locale)));

        log.info("${entity.name} id: " + ${element}.getId());

        // Process upload file
        if (file != null) {
            log.info("File name: " + file.getName());
            log.info("File size: " + file.getSize());
            log.info("File content type: " + file.getContentType());
            byte[] fileContent = null;
            try {
                InputStream inputStream = file.getInputStream();
                if(inputStream == null)
                    log.info("File inputstream is null");
                // fileContent = IOUtils.toByteArray(inputStream);
                ${element}.setContent(fileContent);
            } catch (IOException ex) {
                log.error("Error saving uploaded file");
            }
            ${element}.setContent(fileContent);
        }

        ${element} = ${element}Service.save${entity.name}(${element});
        
        String url = "redirect:/${element}/" + UrlUtil.encodeUrlPathSegment(${element}.getId().toString(), httpServletRequest);

        return url;
    }

    @DeleteMapping
    public void delete${entity.name}(@PathVariable("id") Long id) {
        
        ${element}Service.delete(id);
    }
}
